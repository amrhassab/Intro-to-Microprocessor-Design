


ARM Macro Assembler    Page 1 


    1 00000000                 export           insertion_sort
    2 00000000                 AREA             FLASH, CODE, READONLY
    3 00000000                 ALIGN
    4 00000000         
    5 00000000         ;*******************************************************
                       ***********************
    6 00000000         ; Description
    7 00000000         ; Uses Insertion Sort to sort an array of unsigned 32-bi
                       t numbers. Valid
    8 00000000         ; sizes are 0-1024
    9 00000000         ; Parameters
   10 00000000         ; R0 - Array Address
   11 00000000         ; R1 - Size of the array. 
   12 00000000         ;
   13 00000000         ; Returns
   14 00000000         ;   0 if parameters are valid.  -1 if any of the paramet
                       ers are invalid. 
   15 00000000         ;*******************************************************
                       ***********************
   16 00000000         insertion_sort
                               PROC
   17 00000000         
   18 00000000         ; maintaining EABI standards
   19 00000000 E92D 01F0       PUSH             { R4 - R8 }
   20 00000004         
   21 00000004         
   22 00000004         
   23 00000004         ; checking paramaters ;
   24 00000004         
   25 00000004         ; making sure address not < min value specified
   26 00000004 F240 0200 
              F2C2 0200        MOV32            R2, #0x20000000
   27 0000000C 4290            CMP              R0, R2
   28 0000000E DB2C            BLT              PAR_ERROR
   29 00000010         
   30 00000010         ; making sure address not > than max value specified
   31 00000010 F647 72FC 
              F2C2 0200        MOV32            R2, #0x20007FFC
   32 00000018 4290            CMP              R0, R2
   33 0000001A DC26            BGT              PAR_ERROR
   34 0000001C         
   35 0000001C         ; making sure array size is not < 0
   36 0000001C 2900            CMP              R1, #0
   37 0000001E DB24            BLT              PAR_ERROR
   38 00000020         
   39 00000020         ; making sure array size is not > 1024
   40 00000020 F5B1 6F80       CMP              R1, #1024
   41 00000024 DC21            BGT              PAR_ERROR
   42 00000026         
   43 00000026         ; sorting the array
   44 00000026         
   45 00000026         ; R2 represents the number we are at, we start compariso
                       n at the 2nd num
   46 00000026 4602            MOV              R2, R0
   47 00000028 F102 0204       ADD              R2, R2, #4
   48 0000002C F04F 0801       MOV              R8, #1      ; c for loop index
   49 00000030         
   50 00000030         START_FOR
   51 00000030         



ARM Macro Assembler    Page 2 


   52 00000030 4588            CMP              R8, R1
   53 00000032 D017            BEQ              END_FOR
   54 00000034 4613            MOV              R3, R2      ;address of A[d]
   55 00000036 4647            MOV              R7,R8       ;d while loop index
                                                            
   56 00000038         
   57 00000038         START_WHILE
   58 00000038         
   59 00000038 681D            LDR              R5, [R3]    ; load into R5 what
                                                             is at address D
   60 0000003A F853 4C04       LDR              R4, [R3, #-4] ; load into R4 wh
                                                            at is at address D 
                                                            - 1;
   61 0000003E         
   62 0000003E 2F00            CMP              R7, #0      ; while (d > 0 &&
   63 00000040 D00B            BEQ              END_WHILE
   64 00000042 42A5            CMP              R5, R4      ; a[d] < a[d-1])
   65 00000044 D209            BHS              END_WHILE
   66 00000046         
   67 00000046         
   68 00000046 601C            STR              R4, [R3]
   69 00000048 F843 5C04       STR              R5, [R3, #-4] ; putting back th
                                                            e values into the a
                                                            rray
   70 0000004C         
   71 0000004C F1A3 0304       SUB              R3, R3, #4
   72 00000050         
   73 00000050 F1A7 0701       SUB              R7 ,R7 ,#1  ; D--
   74 00000054 2F00            CMP              R7, #0
   75 00000056 D000            BEQ              END_WHILE
   76 00000058 E7EE            B                START_WHILE
   77 0000005A         
   78 0000005A         END_WHILE
   79 0000005A         
   80 0000005A         
   81 0000005A F102 0204       ADD              R2, R2, #4
   82 0000005E F108 0801       ADD              R8, R8, #1
   83 00000062 E7E5            B                START_FOR
   84 00000064         
   85 00000064         END_FOR
   86 00000064         
   87 00000064 F04F 0000       MOV              R0, #0
   88 00000068 E001            B                SUCCESS
   89 0000006A         
   90 0000006A         ; program branches to here if any parameter is invalid
   91 0000006A         PAR_ERROR
   92 0000006A         
   93 0000006A F04F 30FF       MOV              R0, #-1     ; return -1 if erro
                                                            r
   94 0000006E         
   95 0000006E         
   96 0000006E         SUCCESS
   97 0000006E         
   98 0000006E E8BD 01F0       POP              {R4-R8}
   99 00000072         
  100 00000072                 ENDP
  101 00000072                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\insertionsort.d -o.\obj\insertionsort.o -I"I:\my docs\ECE 353\ECE353-HW2\ECE35



ARM Macro Assembler    Page 3 


3-HW2\src\RTE" -IC:\AppV\mdk_510\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Ap
pV\mdk_510\ARM\PACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 --predefine="__E
VAL SETA 1" --predefine="__MICROLIB SETA 1" --list=.\lst\insertionsort.lst inse
rtionSort.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

END_FOR 00000064

Symbol: END_FOR
   Definitions
      At line 85 in file insertionSort.s
   Uses
      At line 53 in file insertionSort.s
Comment: END_FOR used once
END_WHILE 0000005A

Symbol: END_WHILE
   Definitions
      At line 78 in file insertionSort.s
   Uses
      At line 63 in file insertionSort.s
      At line 65 in file insertionSort.s
      At line 75 in file insertionSort.s

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 2 in file insertionSort.s
   Uses
      None
Comment: FLASH unused
PAR_ERROR 0000006A

Symbol: PAR_ERROR
   Definitions
      At line 91 in file insertionSort.s
   Uses
      At line 28 in file insertionSort.s
      At line 33 in file insertionSort.s
      At line 37 in file insertionSort.s
      At line 41 in file insertionSort.s

START_FOR 00000030

Symbol: START_FOR
   Definitions
      At line 50 in file insertionSort.s
   Uses
      At line 83 in file insertionSort.s
Comment: START_FOR used once
START_WHILE 00000038

Symbol: START_WHILE
   Definitions
      At line 57 in file insertionSort.s
   Uses
      At line 76 in file insertionSort.s
Comment: START_WHILE used once
SUCCESS 0000006E

Symbol: SUCCESS
   Definitions
      At line 96 in file insertionSort.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 88 in file insertionSort.s
Comment: SUCCESS used once
insertion_sort 00000000

Symbol: insertion_sort
   Definitions
      At line 16 in file insertionSort.s
   Uses
      At line 1 in file insertionSort.s
Comment: insertion_sort used once
8 symbols
341 symbols in table
