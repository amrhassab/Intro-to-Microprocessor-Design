


ARM Macro Assembler    Page 1 


    1 00000000                 export           student_sort
    2 00000000                 AREA             FLASH, CODE, READONLY
    3 00000000                 ALIGN
    4 00000000         
    5 00000000         ;*******************************************************
                       ***********************
    6 00000000         ; Description
    7 00000000         ; Merges two arrays together
    8 00000000         ; Parameters
    9 00000000         ; R0 - Left Address
   10 00000000         ; R1 - Left Size
   11 00000000         ; R2 - Right Address
   12 00000000         ; R3 - Right Size
   13 00000000         ;*******************************************************
                       ***********************
   14 00000000         merge
   15 00000000 E92D 49F0       PUSH             {R4-R8, FP,LR}
   16 00000004         
   17 00000004         ; Register Usage
   18 00000004         ; R0 - Left Address
   19 00000004         ; R1 - Left Size
   20 00000004         ; R2 - Right Address
   21 00000004         ; R3 - Right Size
   22 00000004         ; R4 - Left Index
   23 00000004         ; R5 - Right Index
   24 00000004         ; R6 - Left Temp Storage
   25 00000004         ; R7 - Right Temp Storage
   26 00000004         ; R8 - Temp array Index
   27 00000004         
   28 00000004         ; Set the Frame Pointer
   29 00000004         ; The frame pointer is not necessary, but it
   30 00000004         ; is used here to illustrate how it can be used.
   31 00000004 46EB            MOV              FP, SP
   32 00000006         
   33 00000006         ; Need to allocate local variables for the resulting arr
                       ay
   34 00000006         ; The stack only allows WORD sized allocations, so we 
   35 00000006         ; need to shift left by to to get SIZE * 4
   36 00000006         
   37 00000006         ; Since we are sorting bytes, we could reduce the size r
                       eserved
   38 00000006         ; on the stack, but we are simply going to allocate a wo
                       rd of 
   39 00000006         ; stack space for each byte.
   40 00000006 EBAD 0D81       SUB              SP, SP, R1, LSL #2
   41 0000000A EBAD 0D83       SUB              SP, SP, R3, LSL #2
   42 0000000E         
   43 0000000E         ; Initialize the index to be 0 for left and right
   44 0000000E F04F 0400       MOV              R4, #0
   45 00000012 F04F 0500       MOV              R5, #0
   46 00000016 F06F 0800       MVN              R8, #0
   47 0000001A         
   48 0000001A         mergeStart
   49 0000001A         
   50 0000001A         ; If either the Right or Left Indexes are greater than t
                       heir
   51 0000001A         ; size, we terminate the loop 
   52 0000001A 428C            CMP              R4, R1
   53 0000001C BF08 429D       CMPEQ            R5, R3



ARM Macro Assembler    Page 2 


   54 00000020 D021            BEQ              mergeEnd
   55 00000022         
   56 00000022         ; Check to see if both arrays still have elements in the
                       m
   57 00000022 42A1            CMP              R1, R4
   58 00000024 D917            BLS              checkRight
   59 00000026 42AB            CMP              R3, R5
   60 00000028 D90D            BLS              checkLeft
   61 0000002A         
   62 0000002A         ; If left[i] < = right [i]
   63 0000002A 5D06            LDRB             R6, [R0, R4]
   64 0000002C 5D57            LDRB             R7, [R2, R5]
   65 0000002E 42BE            CMP              R6, R7
   66 00000030         
   67 00000030         ; Then move left[i] to temp array, increment left index
   68 00000030         
   69 00000030 BF9C F80B 
              6028             STRBLS           R6, [FP, R8, LSL #2]
   70 00000036 1C64            ADDLS            R4, R4, #1
   71 00000038         
   72 00000038         ; Else, move right[i] to temp array, increment right ind
                       ex
   73 00000038 BFC4 F80B 
              7028             STRBGT           R7, [FP, R8, LSL #2]
   74 0000003E 1C6D            ADDGT            R5, R5, #1
   75 00000040         
   76 00000040         ; Increment the index for the temp array
   77 00000040 F1A8 0801       SUB              R8, #1
   78 00000044 E7E9            B                mergeStart
   79 00000046         
   80 00000046         ; Check to see if the left array still has to be merged
   81 00000046         checkLeft
   82 00000046         ; Move left[i] to temp array, increment left index
   83 00000046 5D06            LDRB             R6, [R0, R4]
   84 00000048 F80B 6028       STRB             R6, [FP, R8, LSL #2]
   85 0000004C F104 0401       ADD              R4, R4, #1
   86 00000050 F1A8 0801       SUB              R8, #1
   87 00000054 E7E1            B                mergeStart
   88 00000056         
   89 00000056         ; Check to see if the right array still has to be merged
                       
   90 00000056         checkRight
   91 00000056         ; Move right[i] to temp array, increment right index
   92 00000056 5D57            LDRB             R7, [R2, R5]
   93 00000058 F80B 7028       STRB             R7, [FP, R8, LSL #2]
   94 0000005C F105 0501       ADD              R5, R5, #1
   95 00000060 F1A8 0801       SUB              R8, #1
   96 00000064 E7D9            B                mergeStart
   97 00000066         
   98 00000066         
   99 00000066         mergeEnd
  100 00000066         ; Copy the temp array back to the original array
  101 00000066         
  102 00000066         ; Calculate the total number of elements to move
  103 00000066 EB01 0603       ADD              R6, R1, R3
  104 0000006A         
  105 0000006A         ; Reset the temp index to 0
  106 0000006A F06F 0800       MVN              R8, #0
  107 0000006E F04F 0500       MOV              R5, #0



ARM Macro Assembler    Page 3 


  108 00000072         
  109 00000072         startFinalCopy
  110 00000072 42B5            CMP              R5, R6
  111 00000074 D007            BEQ              exitMerge
  112 00000076 F85B 7028       LDR              R7, [FP, R8, LSL #2]
  113 0000007A 5547            STRB             R7, [R0, R5]
  114 0000007C F1A8 0801       SUB              R8, #1
  115 00000080 F105 0501       ADD              R5, #1
  116 00000084 E7F5            B                startFinalCopy
  117 00000086         
  118 00000086         exitMerge
  119 00000086 EB0D 0D81       ADD              SP, SP, R1, LSL #2
  120 0000008A EB0D 0D83       ADD              SP, SP, R3, LSL #2
  121 0000008E E8BD 89F0       POP              {R4-R8, FP, PC}
  122 00000092         
  123 00000092         
  124 00000092         ;*******************************************************
                       ***********************
  125 00000092         ; Description
  126 00000092         ; Uses Merge Sort to sort an array of unsigned 8-bit num
                       bers.
  127 00000092         ; Parameters
  128 00000092         ; R0 - Array Address
  129 00000092         ; R1 - Array Size 
  130 00000092         ;*******************************************************
                       ***********************
  131 00000092         student_sort
  132 00000092 B500            PUSH             {LR}
  133 00000094         
  134 00000094         ; Register Usage
  135 00000094         ; R0 - Array Address
  136 00000094         ; R1 - Array Size
  137 00000094         ; R2 - Middle Index
  138 00000094         ; R3 - Saved value of size passed in
  139 00000094         
  140 00000094         ; If the size is <= 1
  141 00000094 2901            CMP              R1, #1
  142 00000096 DD1A            BLE              endMergeSort
  143 00000098         
  144 00000098         ; Recursively merge the left hand side of the array
  145 00000098 B403            PUSH             {R0-R1}
  146 0000009A         
  147 0000009A         ; Calculate the middle
  148 0000009A EA4F 0151       MOV              R1, R1, LSR #1
  149 0000009E         
  150 0000009E F7FF FFFE       BL               student_sort
  151 000000A2         
  152 000000A2 BC03            POP              {R0-R1}
  153 000000A4         
  154 000000A4         
  155 000000A4 B403            PUSH             {R0-R1}
  156 000000A6         
  157 000000A6         ; Save the current size
  158 000000A6 460A            MOV              R2, R1
  159 000000A8         
  160 000000A8 EA4F 0151       MOV              R1, R1, LSR #1
  161 000000AC         
  162 000000AC         ; Calculate the start of the right chunk
  163 000000AC 4408            ADD              R0, R0, R1



ARM Macro Assembler    Page 4 


  164 000000AE         
  165 000000AE         ; Calculate the new size
  166 000000AE EBA2 0101       SUB              R1, R2, R1
  167 000000B2         
  168 000000B2 F7FF FFFE       BL               student_sort
  169 000000B6         
  170 000000B6 BC03            POP              {R0-R1}
  171 000000B8         
  172 000000B8         ; Save the current size
  173 000000B8 460B            MOV              R3, R1
  174 000000BA         
  175 000000BA         ; Move the left size into the 2nd parameter
  176 000000BA EA4F 0151       MOV              R1, R1, LSR #1
  177 000000BE         
  178 000000BE         ; Load the start of the right chunk into R2
  179 000000BE EB00 0201       ADD              R2, R0, R1
  180 000000C2         
  181 000000C2         ; Load the Size of the right chunk into R3
  182 000000C2 EBA3 0301       SUB              R3, R3, R1
  183 000000C6         
  184 000000C6 B40F            PUSH             {R0-R3}
  185 000000C8 F7FF FF9A       BL               merge
  186 000000CC BC0F            POP              {R0-R3}
  187 000000CE         
  188 000000CE         
  189 000000CE         endMergeSort
  190 000000CE         
  191 000000CE BD00            POP              {PC}
  192 000000D0                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\studentsort.d -o.\obj\studentsort.o -I"D:\Box Sync\ECE353\HW2\TestBench\RTE" -
IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 --predefine="__
EVAL SETA 1" --predefine="__MICROLIB SETA 1" --list=.\lst\studentsort.lst stude
ntSort.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 2 in file studentSort.s
   Uses
      None
Comment: FLASH unused
checkLeft 00000046

Symbol: checkLeft
   Definitions
      At line 81 in file studentSort.s
   Uses
      At line 60 in file studentSort.s
Comment: checkLeft used once
checkRight 00000056

Symbol: checkRight
   Definitions
      At line 90 in file studentSort.s
   Uses
      At line 58 in file studentSort.s
Comment: checkRight used once
endMergeSort 000000CE

Symbol: endMergeSort
   Definitions
      At line 189 in file studentSort.s
   Uses
      At line 142 in file studentSort.s
Comment: endMergeSort used once
exitMerge 00000086

Symbol: exitMerge
   Definitions
      At line 118 in file studentSort.s
   Uses
      At line 111 in file studentSort.s
Comment: exitMerge used once
merge 00000000

Symbol: merge
   Definitions
      At line 14 in file studentSort.s
   Uses
      At line 185 in file studentSort.s
Comment: merge used once
mergeEnd 00000066

Symbol: mergeEnd
   Definitions
      At line 99 in file studentSort.s
   Uses
      At line 54 in file studentSort.s
Comment: mergeEnd used once
mergeStart 0000001A

Symbol: mergeStart



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 48 in file studentSort.s
   Uses
      At line 78 in file studentSort.s
      At line 87 in file studentSort.s
      At line 96 in file studentSort.s

startFinalCopy 00000072

Symbol: startFinalCopy
   Definitions
      At line 109 in file studentSort.s
   Uses
      At line 116 in file studentSort.s
Comment: startFinalCopy used once
student_sort 00000092

Symbol: student_sort
   Definitions
      At line 131 in file studentSort.s
   Uses
      At line 1 in file studentSort.s
      At line 150 in file studentSort.s
      At line 168 in file studentSort.s

10 symbols
343 symbols in table
