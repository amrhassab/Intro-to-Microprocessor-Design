


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       Amr Hassaballah 
    3 00000000         ; Description:  Day 1 week 2
    4 00000000         
    5 00000000                 export           __main
    6 00000000         
    7 00000000         ;**********************************************
    8 00000000         ; SRAM
    9 00000000         ;**********************************************
   10 00000000                 AREA             SRAM, READWRITE
   11 00000000                 align
   12 00000000         
   13 00000000         ;**********************************************
   14 00000000         ; Constant Variables (FLASH) Segment
   15 00000000         ;**********************************************
   16 00000000                 AREA             FLASH, CODE, READONLY
   17 00000000                 align
   18 00000000         
   19 00000000         ;**********************************************
   20 00000000         ; Code (FLASH) Segment
   21 00000000         ; main assembly program
   22 00000000         ;**********************************************
   23 00000000         __main  PROC
   24 00000000         
   25 00000000         ; Initialization of R0 and R1
   26 00000000 F04F 000F       MOV              R0, #15
   27 00000004 F04F 0164       MOV              R1, #100
   28 00000008         
   29 00000008         ; Using only conditional instructions (no branches)
   30 00000008         ; Implement the if statemens below.
   31 00000008         
   32 00000008         
   33 00000008         
   34 00000008         ; (1) If R0 == 15, then R2 = 100 , else R2 = 1
   35 00000008 280F            CMP              R0, #15
   36 0000000A BF0D 2264       MOVEQ            R2, #100
   37 0000000E 2201            MOVNE            R2, #1
   38 00000010         
   39 00000010         ; (2) If R0 != 15, then R3 = 200 , else R3 = 2
   40 00000010         
   41 00000010 23C8            MOVNE            R3, #200
   42 00000012 2302            MOVEQ            R3, #2
   43 00000014         
   44 00000014         ; (3) If R0 < 15, then  R4 = 300 , else R4 = 3
   45 00000014         
   46 00000014 BF48 F44F 
              7496             MOVMI            R4, #300
   47 0000001A BFC9 2403       MOVGT            R4, #3
   48 0000001E         
   49 0000001E         
   50 0000001E         ; (4) If R0 <= 15, then R5 = 400 , else R5 = 4
   51 0000001E         
   52 0000001E F44F 75C8       MOVLE            R5, #400
   53 00000022 2504            MOVGT            R5, #4
   54 00000024         
   55 00000024         ; (5) If R0 > 15,  then R6 =500 , else R6 = 5
   56 00000024         
   57 00000024 F44F 76FA       MOVGT            R6, #500
   58 00000028 BFD8 2605       MOVLE            R6, #5



ARM Macro Assembler    Page 2 


   59 0000002C         
   60 0000002C         ; (6) If R0 >= 15, then R7 = 600 , else R7 = 6
   61 0000002C         
   62 0000002C BFAC F44F 
              7716             MOVGE            R7, #600
   63 00000032 2706            MOVLT            R7, #6
   64 00000034         
   65 00000034         
   66 00000034         
   67 00000034 F04F 0002       MOV              R0, #0x2
   68 00000038         
   69 00000038         ; (7) Implement the following switch statement using onl
                       y conditional instructions
   70 00000038         
   71 00000038         ; Hint: Start by setting R1 to the default value and the
                       n checking all of the
   72 00000038         ; other cases.
   73 00000038         
   74 00000038         ; switch(R0)
   75 00000038 F04F 31FF       MOV              R1, #0xFFFFFFFF
   76 0000003C         ; {
   77 0000003C         ;      case 0:
   78 0000003C 2800            CMP              R0, #0
   79 0000003E BF08 2100       MOVEQ            R1, #0
   80 00000042         ;      {
   81 00000042         ;           R1 = 0;
   82 00000042         ;           break;
   83 00000042         ;      }
   84 00000042         ;      case 1:
   85 00000042 2801            CMP              R0, #1
   86 00000044 BF08 210A       MOVEQ            R1, #10
   87 00000048         ;      {
   88 00000048         ;           R1 = 10;
   89 00000048         ;           break;
   90 00000048         ;      }
   91 00000048         ;      case 2:
   92 00000048 2802            CMP              R0, #2
   93 0000004A BF08 2114       MOVEQ            R1, #20
   94 0000004E         ;      {
   95 0000004E         ;           R1 = 20;
   96 0000004E         ;           break;
   97 0000004E         ;      }
   98 0000004E         ;      case 3:
   99 0000004E 2803            CMP              R0, #3
  100 00000050 BF08 211E       MOVEQ            R1, #30
  101 00000054         ;      {
  102 00000054         ;           R1 = 30;
  103 00000054         ;           break;
  104 00000054         ;      }
  105 00000054         ;      default:
  106 00000054         ;      {
  107 00000054         ;           R1 = 0xFFFFFFFF;
  108 00000054         ;           break;
  109 00000054         ;      }
  110 00000054         ;  }
  111 00000054         
  112 00000054         
  113 00000054         
  114 00000054         ; Initialization of R0 and R1



ARM Macro Assembler    Page 3 


  115 00000054 F04F 000F       MOV              R0, #15
  116 00000058 F04F 0164       MOV              R1, #100
  117 0000005C         
  118 0000005C         ; (8) If R0 >= 15 OR R1 < 150, then R8 = 700 , else R8 =
                        7
  119 0000005C F04F 0807       MOV              R8, #7
  120 00000060 280F            CMP              R0, #15
  121 00000062 BFA8 F44F 
              782F             MOVGE            R8, #700
  122 00000068 2996            CMP              R1, #150
  123 0000006A BF18 F44F 
              782F             MOVNE            R8, #700
  124 00000070         
  125 00000070         
  126 00000070         ; (9) If R0 >= 15 AND R1 < 150, then R9 = 800, else R9 =
                        8
  127 00000070 F04F 0908       MOV              R9, #8
  128 00000074 280F            CMP              R0, #15
  129 00000076 BFAC 2996       CMPGE            R1, #150
  130 0000007A F04F 0908       MOVLT            R9, #8
  131 0000007E         
  132 0000007E         
  133 0000007E F240 00FF 
              F6CF 70F0        MOV32            R0, #0xFFF000FF
  134 00000086         ; (10) If bit 2 OR bit 21, then R1 =900 , else R1 <- 9
  135 00000086 F04F 0109       MOV              R1, #9
  136 0000008A F240 0A04 
              F2C0 0A20        MOV32            R10, #0x00200004
  137 00000092 EA10 0F0A       TST              R0, R10
  138 00000096 BF18 F44F 
              7161             MOVNE            R1, #900
  139 0000009C         
  140 0000009C         
  141 0000009C         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!! 
  142 0000009C         
  143 0000009C         INFINITE_LOOP
  144 0000009C E7FE            B                INFINITE_LOOP
  145 0000009E         
  146 0000009E                 ENDP
  147 0000009E 00 00           align
  148 000000A0         
  149 000000A0         
  150 000000A0                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\ece353_main.d -o.\obj\ece353_main.o -I"I:\my docs\ECE 353\Week02-A-Conditional
Instructions\src\RTE" -IC:\AppV\mdk_510\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include 
-IC:\AppV\mdk_510\ARM\PACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 --predefi
ne="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --list=.\lst\ece353_main.lst
 ece353_main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 10 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 16 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 0000009C

Symbol: INFINITE_LOOP
   Definitions
      At line 143 in file ece353_main.s
   Uses
      At line 144 in file ece353_main.s
Comment: INFINITE_LOOP used once
__main 00000000

Symbol: __main
   Definitions
      At line 23 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
3 symbols
337 symbols in table
