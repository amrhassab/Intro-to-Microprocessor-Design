


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 export           bubble_sort
    3 00000000         
    4 00000000                 AREA             FLASH, CODE, READONLY
    5 00000000                 ALIGN
    6 00000000         
    7 00000000         
    8 00000000         ;*******************************************************
                       ***********************
    9 00000000         ; Description
   10 00000000         ;     Given the address in R7, it will read the unsigned
                        byte at R7 and R7 + 1.
   11 00000000         ;     If [R7] > [R7 + 1], swap the values
   12 00000000         ;
   13 00000000         ;     Modify only registers R8 or greater.
   14 00000000         ;
   15 00000000         ; Parameters
   16 00000000         ;   R7 - Array Address
   17 00000000         ;
   18 00000000         ; Returns
   19 00000000         ;   Nothing
   20 00000000         ;*******************************************************
                       ***********************
   21 00000000         swap_values
                               PROC
   22 00000000         ;---------------------------------------
   23 00000000         ; START ADD CODE
   24 00000000         ;---------------------------------------
   25 00000000         
   26 00000000 F897 8000       LDRB             R8, [R7]    ; load content at a
                                                            ddress R7 in to R8 
                                                            then point to next 
                                                            address
   27 00000004 F897 9001       LDRB             R9, [R7, #1] ; R9 now holds con
                                                            tent in next addres
                                                            s
   28 00000008         
   29 00000008         
   30 00000008         
   31 00000008 45C1            CMP              R9, R8
   32 0000000A BFBC F887 
              9000             STRBLT           R9,[R7]
   33 00000010 F887 8001       STRBLT           R8,[R7, #1]
   34 00000014         
   35 00000014         
   36 00000014 4770            BX               LR
   37 00000016         
   38 00000016         ;---------------------------------------
   39 00000016         ; END ADD CODE
   40 00000016         ;---------------------------------------
   41 00000016                 ENDP
   42 00000016         
   43 00000016         
   44 00000016         
   45 00000016         ;*******************************************************
                       ***********************
   46 00000016         ; Description
   47 00000016         ;   Uses Bubble Sort to sort an array of unsigned 8-bit 
                       numbers.



ARM Macro Assembler    Page 2 


   48 00000016         ;
   49 00000016         ;   Modify only registers R0-R7
   50 00000016         ;
   51 00000016         ; Parameters
   52 00000016         ;   R0 - Array Address
   53 00000016         ;   R1 - Array Size
   54 00000016         ;
   55 00000016         ; Returns
   56 00000016         ;   Nothing
   57 00000016         ;*******************************************************
                       ***********************
   58 00000016         bubble_sort
                               PROC
   59 00000016         
   60 00000016         ; Save registers
   61 00000016 E92D 5FFF       PUSH             {R0-R12, LR}
   62 0000001A         
   63 0000001A         ;---------------------------------------
   64 0000001A         ; START ADD CODE
   65 0000001A         ;---------------------------------------
   66 0000001A F1A1 0101       SUB              R1, R1, #1
   67 0000001E         OUT_WHILE_START
   68 0000001E         
   69 0000001E 2900            CMP              R1, #0
   70 00000020 DD0E            BLE              OUT_WHILE_END
   71 00000022 4607            MOV              R7, R0      ; moving address in
                                                            to R7
   72 00000024         
   73 00000024         IN_WHILE_START
   74 00000024         
   75 00000024 EBA7 0B00       SUB              R11, R7, R0
   76 00000028 458B            CMP              R11, R1     ; 
   77 0000002A DC06            BGT              IN_WHILE_END
   78 0000002C D005            BEQ              IN_WHILE_END
   79 0000002E         
   80 0000002E         
   81 0000002E         
   82 0000002E         
   83 0000002E         
   84 0000002E F8DF A018       LDR              R10, =(swap_values)
   85 00000032 47D0            BLX              R10
   86 00000034 F107 0701       ADD              R7,R7, #1
   87 00000038         
   88 00000038         
   89 00000038         
   90 00000038         
   91 00000038 E7F4            B                IN_WHILE_START
   92 0000003A         
   93 0000003A         IN_WHILE_END
   94 0000003A         
   95 0000003A F1A1 0101       SUB              R1, R1, #1
   96 0000003E E7EE            B                OUT_WHILE_START
   97 00000040         
   98 00000040         OUT_WHILE_END
   99 00000040         
  100 00000040         ; NOTE: The return from the function is already
  101 00000040         ; provided below
  102 00000040         
  103 00000040         ;---------------------------------------



ARM Macro Assembler    Page 3 


  104 00000040         ; END ADD CODE
  105 00000040         ;---------------------------------------
  106 00000040         
  107 00000040         
  108 00000040         ; Restore Registers
  109 00000040 E8BD 5FFF       POP              {R0-R12, LR}
  110 00000044         
  111 00000044         ; Return from the function
  112 00000044 4770            BX               LR
  113 00000046         
  114 00000046                 ENDP
  115 00000046         
  116 00000046                 END
              00 00 00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\bubblesort.d -o.\obj\bubblesort.o -I"I:\my docs\ECE 353\Week03-B-ARM-Functions
\src\RTE" -IC:\AppV\mdk_510\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\AppV\md
k_510\ARM\PACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 --predefine="__EVAL S
ETA 1" --predefine="__MICROLIB SETA 1" --list=.\lst\bubblesort.lst bubbleSort.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 4 in file bubbleSort.s
   Uses
      None
Comment: FLASH unused
IN_WHILE_END 0000003A

Symbol: IN_WHILE_END
   Definitions
      At line 93 in file bubbleSort.s
   Uses
      At line 77 in file bubbleSort.s
      At line 78 in file bubbleSort.s

IN_WHILE_START 00000024

Symbol: IN_WHILE_START
   Definitions
      At line 73 in file bubbleSort.s
   Uses
      At line 91 in file bubbleSort.s
Comment: IN_WHILE_START used once
OUT_WHILE_END 00000040

Symbol: OUT_WHILE_END
   Definitions
      At line 98 in file bubbleSort.s
   Uses
      At line 70 in file bubbleSort.s
Comment: OUT_WHILE_END used once
OUT_WHILE_START 0000001E

Symbol: OUT_WHILE_START
   Definitions
      At line 67 in file bubbleSort.s
   Uses
      At line 96 in file bubbleSort.s
Comment: OUT_WHILE_START used once
bubble_sort 00000016

Symbol: bubble_sort
   Definitions
      At line 58 in file bubbleSort.s
   Uses
      At line 2 in file bubbleSort.s
Comment: bubble_sort used once
swap_values 00000000

Symbol: swap_values
   Definitions
      At line 21 in file bubbleSort.s
   Uses
      At line 84 in file bubbleSort.s
Comment: swap_values used once
7 symbols
342 symbols in table
